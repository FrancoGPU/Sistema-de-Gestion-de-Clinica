{
  "version": 3,
  "sources": ["src/app/pages/Autenticacion/login/login.component.ts", "src/app/pages/Autenticacion/login/login.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.css',\n})\nexport class LoginComponent {\n  email: string = '';\n  password: string = '';\n  errorMessage: string = '';\n  isLoading: boolean = false;\n  showPassword: boolean = false;\n  selectedDemoUser: number = -1;\n\n  // Usuarios de demostración para mostrar en la UI\n  demoUsers = [\n    {\n      email: 'administrador@administrador.com',\n      password: 'admin123',\n      role: 'Administrador',\n      icon: 'fa-user-shield',\n    },\n    {\n      email: 'paciente@paciente.com',\n      password: 'paciente123',\n      role: 'Paciente',\n      icon: 'fa-user',\n    },\n  ];\n\n  constructor(private authService: AuthService, private router: Router) {\n    // Si ya está autenticado, redirigir según el rol\n    if (this.authService.isAuthenticated()) {\n      const role = this.authService.getUserRole();\n      if (role === 'administrador') {\n        this.router.navigate(['/admin/index']);\n      } else if (role === 'paciente') {\n        this.router.navigate(['/MediCore']);\n      }\n    }\n  }\n\n  /**\n   * Manejar el envío del formulario\n   */\n  onSubmit(): void {\n    this.errorMessage = '';\n\n    // Validaciones básicas\n    if (!this.email || !this.password) {\n      this.errorMessage = 'Por favor, complete todos los campos';\n      return;\n    }\n\n    if (!this.isValidEmail(this.email)) {\n      this.errorMessage = 'Por favor, ingrese un email válido';\n      return;\n    }\n\n    this.isLoading = true;\n\n    // Simular delay de red (opcional)\n    setTimeout(() => {\n      const result = this.authService.login(this.email, this.password);\n\n      if (!result.success) {\n        this.errorMessage = result.message || 'Error al iniciar sesión';\n        this.isLoading = false;\n      }\n      // Si es exitoso, el AuthService ya maneja la redirección\n    }, 500);\n  }\n\n  /**\n   * Llenar el formulario con un usuario de demostración\n   */\n  useDemoUser(userIndex: number): void {\n    const user = this.demoUsers[userIndex];\n\n    // Marcar como seleccionado\n    this.selectedDemoUser = userIndex;\n\n    // Limpiar cualquier error previo\n    this.errorMessage = '';\n\n    // Llenar los campos\n    this.email = user.email;\n    this.password = user.password;\n\n    // Quitar la selección visual después de un momento\n    setTimeout(() => {\n      this.selectedDemoUser = -1;\n    }, 1000);\n\n    // Opcional: Auto-submit después de un pequeño delay para mejor UX\n    // Descomenta la siguiente línea si quieres que se loguee automáticamente\n    setTimeout(() => this.onSubmit(), 800);\n  }\n\n  /**\n   * Continuar como invitado (sin autenticación)\n   */\n  continueAsGuest(): void {\n    // Redirigir directamente a MediCore sin autenticación\n    this.router.navigate(['/MediCore']);\n  }\n\n  /**\n   * Alternar visibilidad de la contraseña\n   */\n  togglePasswordVisibility(): void {\n    this.showPassword = !this.showPassword;\n  }\n\n  /**\n   * Validar formato de email\n   */\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n}\n", "<div class=\"login-container\">\n  <div class=\"login-card\">\n    <!-- Header -->\n    <div class=\"login-header\">\n      <div class=\"logo-container\">\n        <i class=\"fas fa-heartbeat\"></i>\n      </div>\n      <h1>MediCore</h1>\n      <p class=\"subtitle\">Sistema de Gestión de Clínica</p>\n    </div>\n\n    <!-- Formulario de Login -->\n    <form (ngSubmit)=\"onSubmit()\" class=\"login-form\">\n      <!-- Email -->\n      <div class=\"form-group\">\n        <label for=\"email\">\n          <i class=\"fas fa-envelope\"></i>\n          Correo Electrónico\n        </label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          [(ngModel)]=\"email\"\n          placeholder=\"ejemplo@correo.com\"\n          class=\"form-control\"\n          [class.error]=\"errorMessage && !email\"\n          required\n        />\n      </div>\n\n      <!-- Password -->\n      <div class=\"form-group\">\n        <label for=\"password\">\n          <i class=\"fas fa-lock\"></i>\n          Contraseña\n        </label>\n        <div class=\"password-input-wrapper\">\n          <input\n            [type]=\"showPassword ? 'text' : 'password'\"\n            id=\"password\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            placeholder=\"••••••••\"\n            class=\"form-control\"\n            [class.error]=\"errorMessage && !password\"\n            required\n          />\n          <button\n            type=\"button\"\n            class=\"toggle-password\"\n            (click)=\"togglePasswordVisibility()\"\n            tabindex=\"-1\"\n          >\n            <i [class]=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\n          </button>\n        </div>\n      </div>\n\n      <!-- Error Message -->\n      <div class=\"alert alert-danger\" *ngIf=\"errorMessage\">\n        <i class=\"fas fa-exclamation-circle\"></i>\n        {{ errorMessage }}\n      </div>\n\n      <!-- Submit Button -->\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-login\"\n        [disabled]=\"isLoading\"\n      >\n        <span *ngIf=\"!isLoading\">\n          <i class=\"fas fa-sign-in-alt\"></i>\n          Iniciar Sesión\n        </span>\n        <span *ngIf=\"isLoading\">\n          <i class=\"fas fa-spinner fa-spin\"></i>\n          Iniciando...\n        </span>\n      </button>\n    </form>\n\n    <!-- Divider -->\n    <div class=\"divider\">\n      <span>O prueba con una cuenta de demostración</span>\n    </div>\n\n    <!-- Demo Users -->\n    <div class=\"demo-users\">\n      <div\n        *ngFor=\"let user of demoUsers; let i = index\"\n        class=\"demo-user-card\"\n        [class.selected]=\"selectedDemoUser === i\"\n        (click)=\"useDemoUser(i)\"\n      >\n        <div class=\"demo-user-icon\">\n          <i class=\"fas\" [ngClass]=\"user.icon\"></i>\n        </div>\n        <div class=\"demo-user-info\">\n          <h4>{{ user.role }}</h4>\n          <p>{{ user.email }}</p>\n          <small>Contraseña: {{ user.password }}</small>\n        </div>\n        <div class=\"demo-user-action\">\n          <i class=\"fas\" [ngClass]=\"selectedDemoUser === i ? 'fa-check-circle' : 'fa-arrow-right'\"></i>\n        </div>\n      </div>\n    </div>\n\n    <!-- Botón Invitado -->\n    <button \n      type=\"button\" \n      class=\"btn-guest\" \n      (click)=\"continueAsGuest()\"\n      title=\"Acceder sin necesidad de registro\"\n    >\n      <i class=\"fas fa-user-circle me-2\"></i>\n      Continuar como Invitado\n      <i class=\"fas fa-arrow-right ms-2\"></i>\n    </button>\n\n    <!-- Footer -->\n    <div class=\"login-footer\">\n      <p>\n        <i class=\"fas fa-info-circle\"></i>\n        Sistema de uso interno\n      </p>\n    </div>\n  </div>\n\n  <!-- Background Decoration -->\n  <div class=\"background-decoration\">\n    <div class=\"circle circle-1\"></div>\n    <div class=\"circle circle-2\"></div>\n    <div class=\"circle circle-3\"></div>\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": []
}
