{
  "version": 3,
  "sources": ["src/app/services/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface User {\n  email: string;\n  role: 'administrador' | 'paciente';\n  nombre: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<User | null>;\n  public currentUser: Observable<User | null>;\n\n  // Usuarios de ejemplo (simulación)\n  private readonly DEMO_USERS = [\n    {\n      email: 'administrador@administrador.com',\n      password: 'admin123',\n      role: 'administrador' as const,\n      nombre: 'Administrador Sistema'\n    },\n    {\n      email: 'paciente@paciente.com',\n      password: 'paciente123',\n      role: 'paciente' as const,\n      nombre: 'Juan Pérez'\n    }\n  ];\n\n  constructor(private router: Router) {\n    // Intentar recuperar usuario del localStorage\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject<User | null>(\n      storedUser ? JSON.parse(storedUser) : null\n    );\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  /**\n   * Obtener el valor actual del usuario\n   */\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  /**\n   * Iniciar sesión\n   */\n  login(email: string, password: string): { success: boolean; message?: string; user?: User } {\n    // Buscar usuario en la lista de demo\n    const user = this.DEMO_USERS.find(\n      u => u.email === email && u.password === password\n    );\n\n    if (user) {\n      const userData: User = {\n        email: user.email,\n        role: user.role,\n        nombre: user.nombre\n      };\n\n      // Guardar en localStorage\n      localStorage.setItem('currentUser', JSON.stringify(userData));\n      this.currentUserSubject.next(userData);\n\n      // Redirigir según el rol\n      this.redirectByRole(user.role);\n\n      return { success: true, user: userData };\n    }\n\n    return { success: false, message: 'Email o contraseña incorrectos' };\n  }\n\n  /**\n   * Cerrar sesión\n   */\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Verificar si está autenticado\n   */\n  isAuthenticated(): boolean {\n    return this.currentUserValue !== null;\n  }\n\n  /**\n   * Obtener el rol del usuario actual\n   */\n  getUserRole(): 'administrador' | 'paciente' | null {\n    return this.currentUserValue?.role || null;\n  }\n\n  /**\n   * Obtener el nombre del usuario actual\n   */\n  getUserName(): string {\n    return this.currentUserValue?.nombre || '';\n  }\n\n  /**\n   * Verificar si el usuario es administrador\n   */\n  isAdmin(): boolean {\n    return this.getUserRole() === 'administrador';\n  }\n\n  /**\n   * Verificar si el usuario es paciente\n   */\n  isPaciente(): boolean {\n    return this.getUserRole() === 'paciente';\n  }\n\n  /**\n   * Redirigir según el rol del usuario\n   */\n  private redirectByRole(role: 'administrador' | 'paciente'): void {\n    if (role === 'administrador') {\n      this.router.navigate(['/admin/index']);\n    } else if (role === 'paciente') {\n      this.router.navigate(['/MediCore']);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAaM,IAAO,cAAP,MAAO,aAAW;EAoBF;EAnBZ;EACD;;EAGU,aAAa;IAC5B;MACE,OAAO;MACP,UAAU;MACV,MAAM;MACN,QAAQ;;IAEV;MACE,OAAO;MACP,UAAU;MACV,MAAM;MACN,QAAQ;;;EAIZ,YAAoB,QAAc;AAAd,SAAA,SAAA;AAElB,UAAM,aAAa,aAAa,QAAQ,aAAa;AACrD,SAAK,qBAAqB,IAAI,gBAC5B,aAAa,KAAK,MAAM,UAAU,IAAI,IAAI;AAE5C,SAAK,cAAc,KAAK,mBAAmB,aAAY;EACzD;;;;EAKA,IAAW,mBAAgB;AACzB,WAAO,KAAK,mBAAmB;EACjC;;;;EAKA,MAAM,OAAe,UAAgB;AAEnC,UAAM,OAAO,KAAK,WAAW,KAC3B,OAAK,EAAE,UAAU,SAAS,EAAE,aAAa,QAAQ;AAGnD,QAAI,MAAM;AACR,YAAM,WAAiB;QACrB,OAAO,KAAK;QACZ,MAAM,KAAK;QACX,QAAQ,KAAK;;AAIf,mBAAa,QAAQ,eAAe,KAAK,UAAU,QAAQ,CAAC;AAC5D,WAAK,mBAAmB,KAAK,QAAQ;AAGrC,WAAK,eAAe,KAAK,IAAI;AAE7B,aAAO,EAAE,SAAS,MAAM,MAAM,SAAQ;IACxC;AAEA,WAAO,EAAE,SAAS,OAAO,SAAS,oCAAgC;EACpE;;;;EAKA,SAAM;AACJ,iBAAa,WAAW,aAAa;AACrC,SAAK,mBAAmB,KAAK,IAAI;AACjC,SAAK,OAAO,SAAS,CAAC,QAAQ,CAAC;EACjC;;;;EAKA,kBAAe;AACb,WAAO,KAAK,qBAAqB;EACnC;;;;EAKA,cAAW;AACT,WAAO,KAAK,kBAAkB,QAAQ;EACxC;;;;EAKA,cAAW;AACT,WAAO,KAAK,kBAAkB,UAAU;EAC1C;;;;EAKA,UAAO;AACL,WAAO,KAAK,YAAW,MAAO;EAChC;;;;EAKA,aAAU;AACR,WAAO,KAAK,YAAW,MAAO;EAChC;;;;EAKQ,eAAe,MAAkC;AACvD,QAAI,SAAS,iBAAiB;AAC5B,WAAK,OAAO,SAAS,CAAC,cAAc,CAAC;IACvC,WAAW,SAAS,YAAY;AAC9B,WAAK,OAAO,SAAS,CAAC,WAAW,CAAC;IACpC;EACF;;qCAtHW,cAAW,mBAAA,MAAA,CAAA;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;;;sEAEP,aAAW,CAAA;UAHvB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
